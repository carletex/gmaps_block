<?php
/**
 * Implements hook_help.
 *
 * Displays help and module information.
 *
 * @param path
 *   Which path of the site we're using to display help
 * @param arg
 *   Array that holds the current path as returned from arg() function
 */

function gmaps_block_help($path, $arg) {
	switch ($path) {
		case "admin/help#gmaps_block":
			return '<p>' . t("To add a new GMaps block, use the 'Add GMap' link on the administer blocks page.") . '</p>';
			break;
	  }
}

/**
 * Implements hook_menu().
 */

function gmaps_block_menu() {
    $items['admin/structure/block/add-gmaps-block'] = array(
      'title' => 'Add GMaps block',
      'description' => 'Add a new GMaps block.',
      'page callback' => 'drupal_get_form',
      'page arguments' => array('gmaps_block_add_block_form'),
      'access arguments' => array('administer blocks'),
      'type' => MENU_LOCAL_ACTION,
    );

  return $items;
}

/**
 * Implements hook_block_info().
 */
function gmaps_block_block_info() {
  $blocks = array();
  $deltas = variable_get('gmaps_block_ids', array());

  foreach ($deltas AS $delta) {
    $title = db_query("SELECT title FROM {block} WHERE module = :module AND delta = :delta",
                       array(':module' => 'gmaps_block', ':delta' => $delta))->fetchField();
    // If set admin_title, else use default title
    $admin_title = variable_get("gmaps_block_{$delta}_admin_title",  $title);

    $blocks[$delta]['info'] = check_plain($admin_title);
    $blocks[$delta]['cache'] = DRUPAL_NO_CACHE;
  }
  return $blocks;
}

/**
 * Menu callback: display the GMap block addition form.
 *
 */
function gmaps_block_add_block_form($form, &$form_state) {
  module_load_include('inc', 'block', 'block.admin');
  $form = block_admin_configure($form, $form_state, 'gmaps_block', NULL);
  $form['#submit'] = array('gmaps_block_add_block_form_submit');

  return $form;
}

/**
 * Save the new menu block.
 */
function gmaps_block_add_block_form_submit($form, &$form_state) {
  // Determine the delta of the new block.
  $block_ids = variable_get('gmaps_block_ids', array());
  $delta = empty($block_ids) ? 1 : max($block_ids) + 1;
  $form_state['values']['delta'] = $delta;

  // Save the new array of blocks IDs.
  $block_ids[] = $delta;
  variable_set('gmaps_block_ids', $block_ids);

  // Save the block configuration.
  gmaps_block_block_save($delta, $form_state['values']);

  // Run the normal new block submission (borrowed from block_add_block_form_submit).
  $query = db_insert('block')->fields(array('visibility', 'pages', 'custom', 'title', 'module', 'theme', 'region', 'status', 'weight', 'delta', 'cache'));
  foreach (list_themes() as $key => $theme) {
    if ($theme->status) {
      $region = !empty($form_state['values']['regions'][$theme->name]) ? $form_state['values']['regions'][$theme->name] : BLOCK_REGION_NONE;
      $query->values(array(
        'visibility' => (int) $form_state['values']['visibility'],
        'pages' => trim($form_state['values']['pages']),
        'custom' => (int) $form_state['values']['custom'],
        'title' => $form_state['values']['title'],
        'module' => $form_state['values']['module'],
        'theme' => $theme->name,
        'region' => ($region == BLOCK_REGION_NONE ? '' : $region),
        'status' => 0,
        'status' => (int) ($region != BLOCK_REGION_NONE),
        'weight' => 0,
        'delta' => $delta,
        'cache' => DRUPAL_NO_CACHE,
      ));
    }
  }
  $query->execute();

  drupal_set_message(t('The block has been created.'));
  cache_clear_all();
  $form_state['redirect'] = 'admin/structure/block';
}

/**
 * Implements hook_block_configure().
 */
function gmaps_block_block_configure($delta = '') {

  $form = array();
  // All we need to provide is the specific configuration options for our
  // block. Drupal will take care of the standard block configuration options
  // (block title, page visibility, etc.) and the save button.
  $form['admin_title'] = array(
    '#type' => 'textfield',
    '#default_value' => variable_get("gmaps_block_{$delta}_admin_title"),
    '#title' => t('Administrative title'),
    '#required' => TRUE,
    '#description' => t('A brief description of your block.'),
  );
  $form['latitude'] = array(
    '#type' => 'textfield',
    '#title' => t('Latitude'),
    '#size' => 30,
    '#description' => t('Location latitude.'),
    '#default_value' => variable_get("gmaps_block_{$delta}_latitude"),
  );
  $form['longitude'] = array(
    '#type' => 'textfield',
    '#title' => t('Longitude'),
    '#size' => 30,
    '#description' => t('Location longitude.'),
    '#default_value' => variable_get("gmaps_block_{$delta}_longitude"),
  );
  $form['width'] = array(
    '#type' => 'textfield',
    '#title' => t('Width'),
    '#size' => 30,
    '#description' => t('Map width.'),
    '#default_value' => variable_get("gmaps_block_{$delta}_width"),
  );
  $form['height'] = array(
    '#type' => 'textfield',
    '#title' => t('Height'),
    '#size' => 30,
    '#description' => t('Map height.'),
    '#default_value' => variable_get("gmaps_block_{$delta}_height"),
  );
  $form['info_content'] = array(
    '#type' => 'text_format',
    '#title' => t('Info window content'),
    '#rows' => 10,
    '#description' => t('Content of the info window when clicking'),
    '#default_value' => variable_get("gmaps_block_{$delta}_info_content"),
  );

  return $form;

}

/**
 * Implements hook_block_save().
 */
function gmaps_block_block_save($delta = '', $edit = array()) {
  if (!empty($delta)) {
    variable_set("gmaps_block_{$delta}_admin_title", $edit['admin_title']);
    variable_set("gmaps_block_{$delta}_latitude", $edit['latitude']);
    variable_set("gmaps_block_{$delta}_longitude", $edit['longitude']);
    variable_set("gmaps_block_{$delta}_width", $edit['width']);
    variable_set("gmaps_block_{$delta}_height", $edit['height']);
    variable_set("gmaps_block_{$delta}_info_content", $edit['info_content']['value']);
  }
}

/**
 * Returns the configuration for the requested block delta.
 *
 * @param $delta
 *   string The delta that uniquely identifies the block in the block system. If
 *   not specified, the default configuration will be returned.
 * @return
 *   array An associated array of configuration options.
 */
function gmaps_block_get_config($delta = NULL) {

  $config = array(
    'delta'    => $delta,
    'title'    => '',
    'latitude' => 0,
    'altitude' => 0,
    'info_content' => ''
  );

  // Get the block configuration options.
  if ($delta) {
    $config['title'] = db_query("SELECT title FROM {block} WHERE module = :module AND delta = :delta",
                       array(':module' => 'gmaps_block', ':delta' => $delta))->fetchField();
    $config['admin_title']  = variable_get("gmaps_block_{$delta}_admin_title",  $config['admin_title']);
    $config['latitude']  = variable_get("gmaps_block_{$delta}_latitude",  $config['latitude']);
    $config['altitude'] = variable_get("gmaps_block_{$delta}_longitude", $config['longitude']);
    $config['width']  = variable_get("gmaps_block_{$delta}_width",  $config['width']);
    $config['height'] = variable_get("gmaps_block_{$delta}_height", $config['height']);
    $config['info_content'] = variable_get("gmaps_block_{$delta}_info_content", $config['info_content']);
  }

  return $config;
}

/**
 * Menu callback: confirm deletion of gmaps blocks.
 */
function menu_block_delete($form, &$form_state, $delta = 0) {
  $title = db_query("SELECT title FROM {block} WHERE module = :module AND delta = :delta",
                       array(':module' => 'gmaps_block', ':delta' => $delta))->fetchField();
    // If set admin_title, else use default title
    $admin_title = variable_get("gmaps_block_{$delta}_admin_title",  $title);
  $form['block_title'] = array('#type' => 'hidden', '#value' => $title);
  $form['delta'] = array('#type' => 'hidden', '#value' => $delta);

  return confirm_form($form, t('Are you sure you want to delete the "%name" block?', array('%name' => $title)), 'admin/structure/block', NULL, t('Delete'), t('Cancel'));
}

/**
 * Deletion of gmaps blocks.
 */
function menu_block_delete_submit($form, &$form_state) {
  // Remove the menu block configuration variables.
  $delta = $form_state['values']['delta'];
  $block_ids = variable_get('menu_block_ids', array());
  unset($block_ids[array_search($delta, $block_ids)]);
  sort($block_ids);
  variable_set('gmaps_block_ids', $block_ids);
  variable_del("gmaps_block_{$delta}_admin_title");
  variable_del("gmaps_block_{$delta}_latitude");
  variable_del("gmaps_block_{$delta}_longitude");
  variable_del("gmaps_block_{$delta}_width");
  variable_del("gmaps_block_{$delta}_height");
  variable_del("gmaps_block_{$delta}_info_content");

  db_delete('block')
    ->condition('module', 'gmaps_block')
    ->condition('delta', $delta)
    ->execute();
  drupal_set_message(t('The block "%name" has been removed.', array('%name' => $form_state['values']['block_title'])));
  cache_clear_all();
  $form_state['redirect'] = 'admin/structure/block';
  return;
}

/**
 * Implements hook_block_view().
 */
function gmaps_block_block_view($delta = '') {
  $data = gmaps_block_get_config($delta);

  $block['subject'] = $data['title'];
  $block['content'] = gmaps_block_draw_map($data['latitude'], $data['altitude'],$data['width'], $data['height'], $data['info_content']);

  return $block;
}

function gmaps_block_draw_map($lat, $alt, $width, $height, $info_content) {
  return <<<HTML
  <div id="map_canvas" style="width:{$width}px; height:{$height}px;"></div>
    <script type="text/javascript" src="//maps.googleapis.com/maps/api/js?sensor=false"></script>
    <script type="text/javascript">
      var posicion = new google.maps.LatLng({$lat}, {$alt});
        var mapOptions = {
          center: posicion,
          zoom: 15,
          mapTypeId: google.maps.MapTypeId.ROADMAP
        };
        var map = new google.maps.Map(document.getElementById("map_canvas"),
            mapOptions);

        var marker = new google.maps.Marker({
        position: posicion,
        map: map,
        icon: "http://maps.google.com/mapfiles/ms/icons/blue-dot.png",
        title: "[CONF] Mi casa"
      });

        var info = new google.maps.InfoWindow({
          content: '{$info_content}'
        });

        google.maps.event.addListener(marker, "click", function() {
          info.open(map, marker);
        });
      </script>
HTML;
}